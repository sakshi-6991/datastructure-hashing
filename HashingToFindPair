/*

Find a pair with the given sum in an array.

Given an unsorted integer array, find a pair with the given sum in it.

Input: nums = [8, 7, 2, 5, 3, 1]target = 10 Output: Pair found (8, 2)orPair found (7, 3) 

'Using Hashing'
*/

import java.util.HashMap;
import java.util.Map;

public class HashingToFindPair{
	
	public static void findPair(int[] nums, int target){
		Map<Integer,Integer> map = new HashMap<>();
		for(int i=0;i<nums.length;i++){
			if(map.containsKey(target-nums[i])){
				System.out.println("Pair found"+nums[map.get(target-nums[i])]+" , "+nums[i]);
			}
			map.put(nums[i],i);
		}
		if(map.isEmpty()){
			System.out.println("Pair not found");
		}else{
			System.out.println(map);
		}
	}

	public static void main(String[] args){
		int[] nums = {8,7,2,5,3,1};
		int target = 10;
		findPair(nums,target);
	}
}

/*

Time Complexity :

1. Initialization of the HashMap : Creating an empty HashMap has a constant time complexity, O(1).
2. For Loop : The loop runs n times, where n is the length of the array nums. This gives us O(n) iterations.
	inside : Checking if the map contains the key: map.containsKey(target - nums[i]) is an O(1) operation on average due to the efficient nature of HashMap's hash table implementation.
			 Getting the value from the map: map.get(target - nums[i]) is also an O(1) operation on average.
			 Inserting into the map: map.put(nums[i], i) is an O(1) operation on average.
3. Checking if the map is empty and printing it: The map.isEmpty() method and the System.out.println(map) statement outside the loop are both O(1) operations.

The overall time complexity of the findPair method is : O(n)

Space Complexity : 

1. HashMap Storage : In the worst case, we may store all n elements from the array nums into the HashMap. Therefore, the space complexity for storing the keys and their corresponding indices is O(n).
2. Other Variables: The space required for other variables (like target, i, and any temporary storage) is O(1).

The overall space complexity of the findPair method is : O(n)

Time Complexity : O(n)
Space Complexity : O(n)

*/
